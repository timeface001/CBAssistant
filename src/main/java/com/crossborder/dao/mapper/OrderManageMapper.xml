<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.crossborder.dao.OrderManageDao">
    <insert id="insertOrders" parameterType="com.crossborder.entity.LocalOrder">
            MERGE INTO T_ORDER t1
            USING (SELECT #{amazonOrderId} orderId FROM dual) t2
            ON (t1.AMAZONORDERID = t2.orderId)
            WHEN matched THEN
            UPDATE set t1.ORDERSTATUS = #{orderStatus,jdbcType=VARCHAR},
            t1.LASTUPDATEDATE = #{lastUpdateDate,jdbcType=VARCHAR},
            t1.COMMISSION = #{commission,jdbcType=DOUBLE}
            WHEN not matched THEN
            INSERT
            (ID,
            AMAZONORDERID,
            SELLERORDERID,
            ORDERSTATUS,
            PURCHASEDATE,
            LASTUPDATEDATE,
            FULFILLMENTCHANNEL,
            ORDERTOTAL,
            NUMBEROFITEMSSHIPPED,
            NUMBEROFITEMSUNSHIPPED,
            PAYMENTMETHOD,
            MARKETPLACEID,
            BUYERNAME,
            ORDERTYPE,
            RUNNINGTIME,
            SALESMAN,
            SALESCOMPANY,
            SALESSOURCE,
            BUYERCOUNTRY,
            TRANSPORTCOMPANY,
            INTLTRACKNUM,
            CURRENCYCODE,
            LOCALSTATUS,
            SHIPPINGPRICE,
            COMMISSION,
            UPDATE_TIME)
            VALUES
            (seq_order_id.nextval,
            #{amazonOrderId,jdbcType=VARCHAR},
            #{sellerOrderId,jdbcType=VARCHAR},
            #{orderStatus,jdbcType=VARCHAR},
            #{purchaseDate,jdbcType=VARCHAR},
            #{lastUpdateDate,jdbcType=VARCHAR},
            #{fulfillmentChannel,jdbcType=VARCHAR},
            #{orderTotal,jdbcType=DOUBLE},
            #{numberOfItemsShipped,jdbcType=INTEGER},
            #{numberOfItemsUnshipped,jdbcType=INTEGER},
            #{paymentMethod,jdbcType=VARCHAR},
            #{marketplaceId,jdbcType=VARCHAR},
            #{buyerName,jdbcType=VARCHAR},
            #{orderType,jdbcType=VARCHAR},
            #{runningTime,jdbcType=VARCHAR},
            #{salesMan,jdbcType=VARCHAR},
            #{salesCompany,jdbcType=VARCHAR},
            #{salesSource,jdbcType=VARCHAR},
            #{buyerCounty,jdbcType=VARCHAR},
            #{transportCompany,jdbcType=VARCHAR},
            #{intlTrackNum,jdbcType=VARCHAR},
            #{currencyCode,jdbcType=VARCHAR},
            #{localStatus,jdbcType=VARCHAR},
            #{shippingPrice,jdbcType=DOUBLE},
            #{commission,jdbcType=DOUBLE},
            #{updateTime,jdbcType=VARCHAR})
        </insert>
    <!--<insert id="insertOrders" parameterType="java.util.List">
        MERGE INTO T_ORDER t1
        USING (
        <foreach close="" collection="list" index="index" item="item" open="" separator="union">
            SELECT #{item.amazonOrderId} orderId FROM dual
        </foreach>
        ) t2
        ON (t1.AMAZONORDERID = t2.orderId)
        WHEN matched THEN
        UPDATE set t1.ORDERSTATUS = #{item.orderStatus,jdbcType=VARCHAR},
        t1.LASTUPDATEDATE = #{item.lastUpdateDate,jdbcType=VARCHAR},
        t1.COMMISSION = #{item.commission,jdbcType=DOUBLE}
        WHEN not matched THEN
        INSERT
        (ID,
        AMAZONORDERID,
        SELLERORDERID,
        ORDERSTATUS,
        PURCHASEDATE,
        LASTUPDATEDATE,
        FULFILLMENTCHANNEL,
        ORDERTOTAL,
        NUMBEROFITEMSSHIPPED,
        NUMBEROFITEMSUNSHIPPED,
        PAYMENTMETHOD,
        MARKETPLACEID,
        BUYERNAME,
        ORDERTYPE,
        RUNNINGTIME,
        SALESMAN,
        SALESCOMPANY,
        SALESSOURCE,
        BUYERCOUNTRY,
        TRANSPORTCOMPANY,
        INTLTRACKNUM,
        CURRENCYCODE,
        LOCALSTATUS,
        SHIPPINGPRICE,
        COMMISSION,
        UPDATE_TIME)
        VALUES
        (seq_order_id.nextval,
        #{item.amazonOrderId,jdbcType=VARCHAR},
        #{item.sellerOrderId,jdbcType=VARCHAR},
        #{item.orderStatus,jdbcType=VARCHAR},
        #{item.purchaseDate,jdbcType=VARCHAR},
        #{item.lastUpdateDate,jdbcType=VARCHAR},
        #{item.fulfillmentChannel,jdbcType=VARCHAR},
        #{item.orderTotal,jdbcType=DOUBLE},
        #{item.numberOfItemsShipped,jdbcType=INTEGER},
        #{item.numberOfItemsUnshipped,jdbcType=INTEGER},
        #{item.paymentMethod,jdbcType=VARCHAR},
        #{item.marketplaceId,jdbcType=VARCHAR},
        #{item.buyerName,jdbcType=VARCHAR},
        #{item.orderType,jdbcType=VARCHAR},
        #{item.runningTime,jdbcType=VARCHAR},
        #{item.salesMan,jdbcType=VARCHAR},
        #{item.salesCompany,jdbcType=VARCHAR},
        #{item.salesSource,jdbcType=VARCHAR},
        #{item.buyerCounty,jdbcType=VARCHAR},
        #{item.transportCompany,jdbcType=VARCHAR},
        #{item.intlTrackNum,jdbcType=VARCHAR},
        #{item.currencyCode,jdbcType=VARCHAR},
        #{item.localStatus,jdbcType=VARCHAR},
        #{item.shippingPrice,jdbcType=DOUBLE},
        #{item.commission,jdbcType=DOUBLE},
        #{item.updateTime,jdbcType=VARCHAR})
    </insert>-->
    <insert id="cloneOrder" parameterType="java.lang.String">
        INSERT INTO
        T_ORDER(ID,
                AMAZONORDERID,
                SELLERORDERID,
                ORDERSTATUS,
                PURCHASEDATE,
                LASTUPDATEDATE,
                FULFILLMENTCHANNEL,
                ORDERTOTAL,
                NUMBEROFITEMSSHIPPED,
                NUMBEROFITEMSUNSHIPPED,
                PAYMENTMETHOD,
                MARKETPLACEID,
                BUYERNAME,
                ORDERTYPE,
                RUNNINGTIME,
                SALESMAN,
                SALESCOMPANY,
                SALESSOURCE,
                BUYERCOUNTRY,
                TRANSPORTCOMPANY,
                INTLTRACKNUM,
                CURRENCYCODE,
                LOCALSTATUS,
                SHIPPINGPRICE,
                COMMISSION,
                UPDATE_TIME)
        SELECT
        seq_order_id.nextval,
        t1.AMAZONORDERID || '-clone',
        t1.SELLERORDERID,
        t1.ORDERSTATUS,
        t1.PURCHASEDATE,
        t1.LASTUPDATEDATE,
        t1.FULFILLMENTCHANNEL,
        t1.ORDERTOTAL,
        t1.NUMBEROFITEMSSHIPPED,
        t1.NUMBEROFITEMSUNSHIPPED,
        t1.PAYMENTMETHOD,
        t1.MARKETPLACEID,
        t1.BUYERNAME,
        t1.ORDERTYPE,
        t1.RUNNINGTIME,
        t1.SALESMAN,
        t1.SALESCOMPANY,
        t1.SALESSOURCE,
        t1.BUYERCOUNTRY,
        t1.TRANSPORTCOMPANY,
        t1.INTLTRACKNUM,
        t1.CURRENCYCODE,
        '1',
        t1.SHIPPINGPRICE,
        t1.COMMISSION,
        to_char(CURRENT_DATE ,'yyyy-MM-dd hh24:mi:ss')
        FROM T_ORDER t1
        WHERE t1.AMAZONORDERID = #{amazonOrderId,jdbcType=VARCHAR}
    </insert>

    <insert id="insertOrderItem" parameterType="com.crossborder.entity.LocalOrderItem">
            MERGE INTO T_ORDER_ITEM t1
            USING (SELECT #{orderItemId} orderItemId FROM dual) t2
            ON (t1.ORDERITEMID = t2.orderItemId)
            WHEN matched THEN
            UPDATE set
            t1.ITEMPRICE = #{itemPrice,jdbcType=VARCHAR},
            t1.QUANTITYSHIPPED = #{quantityShipped,jdbcType=VARCHAR},
            t1.SMALLIMAGE = #{smallImage,jdbcType=VARCHAR},
            t1.SHIPPINGPRICERMB = #{shippingPriceRMB,jdbcType=DOUBLE},
            t1.GIFTWRAPPRICE = #{giftWrapPrice,jdbcType=DOUBLE}
            WHEN not matched THEN
            INSERT (AMAZONORDERID,
            COST,
            SELLERSKU,
            ORDERITEMID,
            TITLE,
            STATUS,
            ASIN,
            QUANTITYSHIPPED,
            ITEMPRICE,
            SHIPPINGPRICE,
            REFUNDMENT,
            PURCHASENUM,
            TRACKNUM,
            ACTUALWEIGHT,
            PAYWEIGHT,
            VOLUMEWEIGHT,
            CURRENCYCODE,
            SMALLIMAGE,
            ITEMPRICERMB,
            SHIPPINGPRICERMB,
            GIFTWRAPPRICE,
            GIFTWRAPPRICERMB,
            COMMISSION,
            COMMISSIONRMB)
            VALUES (#{amazonOrderId,jdbcType=VARCHAR},
            #{cost,jdbcType=VARCHAR},
            #{sellerSKU,jdbcType=VARCHAR},
            #{orderItemId,jdbcType=VARCHAR},
            #{title,jdbcType=VARCHAR},
            #{status,jdbcType=VARCHAR},
            #{asin,jdbcType=VARCHAR},
            #{quantityShipped,jdbcType=INTEGER},
            #{itemPrice,jdbcType=DOUBLE},
            #{shippingPrice,jdbcType=DOUBLE},
            #{refundment,jdbcType=DOUBLE},
            #{purchaseNum,jdbcType=VARCHAR},
            #{trackNum,jdbcType=VARCHAR},
            #{actualWeight,jdbcType=DOUBLE},
            #{payWeight,jdbcType=DOUBLE},
            #{volumeWeight,jdbcType=DOUBLE},
            #{currencyCode,jdbcType=VARCHAR},
            #{smallImage,jdbcType=VARCHAR},
            #{itemPriceRMB,jdbcType=DOUBLE},
            #{shippingPriceRMB,jdbcType=DOUBLE},
            #{giftWrapPrice,jdbcType=DOUBLE},
            #{giftWrapPriceRMB,jdbcType=DOUBLE},
            #{commission,jdbcType=DOUBLE},
            #{commissionRMB,jdbcType=DOUBLE})
        </insert>

    <!--<insert id="insertOrderItem" parameterType="java.util.List">
        MERGE INTO T_ORDER_ITEM t1
        USING (
        <foreach close="" collection="list" index="index" item="item" open="" separator="union">
            SELECT #{item.orderItemId} orderItemId FROM dual
        </foreach>
        ) t2
        ON (t1.ORDERITEMID = t2.orderItemId)
        WHEN matched THEN
        UPDATE set
        t1.ITEMPRICE = #{item.itemPrice,jdbcType=VARCHAR},
        t1.QUANTITYSHIPPED = #{item.quantityShipped,jdbcType=VARCHAR},
        t1.SMALLIMAGE = #{item.smallImage,jdbcType=VARCHAR},
        t1.SHIPPINGPRICERMB = #{item.shippingPriceRMB,jdbcType=DOUBLE},
        t1.GIFTWRAPPRICE = #{item.giftWrapPrice,jdbcType=DOUBLE}
        WHEN not matched THEN
        INSERT (AMAZONORDERID,
        COST,
        SELLERSKU,
        ORDERITEMID,
        TITLE,
        STATUS,
        ASIN,
        QUANTITYSHIPPED,
        ITEMPRICE,
        SHIPPINGPRICE,
        REFUNDMENT,
        PURCHASENUM,
        TRACKNUM,
        ACTUALWEIGHT,
        PAYWEIGHT,
        VOLUMEWEIGHT,
        CURRENCYCODE,
        SMALLIMAGE,
        ITEMPRICERMB,
        SHIPPINGPRICERMB,
        GIFTWRAPPRICE,
        GIFTWRAPPRICERMB,
        COMMISSION,
        COMMISSIONRMB)
        VALUES (#{item.amazonOrderId,jdbcType=VARCHAR},
        #{item.cost,jdbcType=VARCHAR},
        #{item.sellerSKU,jdbcType=VARCHAR},
        #{item.orderItemId,jdbcType=VARCHAR},
        #{item.title,jdbcType=VARCHAR},
        #{item.status,jdbcType=VARCHAR},
        #{item.asin,jdbcType=VARCHAR},
        #{item.quantityShipped,jdbcType=INTEGER},
        #{item.itemPrice,jdbcType=DOUBLE},
        #{item.shippingPrice,jdbcType=DOUBLE},
        #{item.refundment,jdbcType=DOUBLE},
        #{item.purchaseNum,jdbcType=VARCHAR},
        #{item.trackNum,jdbcType=VARCHAR},
        #{item.actualWeight,jdbcType=DOUBLE},
        #{item.payWeight,jdbcType=DOUBLE},
        #{item.volumeWeight,jdbcType=DOUBLE},
        #{item.currencyCode,jdbcType=VARCHAR},
        #{item.smallImage,jdbcType=VARCHAR},
        #{item.itemPriceRMB,jdbcType=DOUBLE},
        #{item.shippingPriceRMB,jdbcType=DOUBLE},
        #{item.giftWrapPrice,jdbcType=DOUBLE},
        #{item.giftWrapPriceRMB,jdbcType=DOUBLE},
        #{item.commission,jdbcType=DOUBLE},
        #{item.commissionRMB,jdbcType=DOUBLE})
    </insert>-->
    <insert id="cloneOrderItem" parameterType="java.lang.String">
        INSERT INTO
        T_ORDER_ITEM(AMAZONORDERID,
        COST,
        SELLERSKU,
        ORDERITEMID,
        TITLE,
        STATUS,
        ASIN,
        QUANTITYSHIPPED,
        ITEMPRICE,
        SHIPPINGPRICE,
        REFUNDMENT,
        PURCHASENUM,
        TRACKNUM,
        ACTUALWEIGHT,
        PAYWEIGHT,
        VOLUMEWEIGHT,
        CURRENCYCODE,
        SMALLIMAGE,
        ITEMPRICERMB,
        SHIPPINGPRICERMB,
        GIFTWRAPPRICE,
        GIFTWRAPPRICERMB,
        COMMISSION,
        COMMISSIONRMB)
        SELECT
        t1.AMAZONORDERID || '-clone',
        0,
        t1.SELLERSKU,
        t1.ORDERITEMID || '-clone',
        t1.TITLE,
        '1',
        t1.ASIN,
        t1.QUANTITYSHIPPED,
        0,
        0,
        0,
        t1.PURCHASENUM,
        t1.TRACKNUM,
        t1.ACTUALWEIGHT,
        t1.PAYWEIGHT,
        t1.VOLUMEWEIGHT,
        t1.CURRENCYCODE,
        t1.SMALLIMAGE,
        0,
        0,
        0,
        0,
        0,
        0
        FROM T_ORDER_ITEM t1
        WHERE t1.AMAZONORDERID = #{amazonOrderId,jdbcType=VARCHAR}
    </insert>
    <insert id="insertAddress" parameterType="com.crossborder.entity.AddressInfo">
        MERGE INTO T_ADDRESS t1
        USING (SELECT #{amazonOrderId} amazonOrderId FROM dual) t2
        ON (t1.AMAZONORDERID = t2.amazonOrderId)
        WHEN matched THEN
        UPDATE set
        t1.CREATE_USER = #{createUser,jdbcType=VARCHAR}
        WHEN not matched THEN
        INSERT(
        AMAZONORDERID,
        USERNAME,
        COMPANY,
        PHONE,
        COUNTRYCODE,
        POSTALCODE,
        CITY,
        STATEORREGION,
        ADDRESSLINE1,
        ADDRESSLINE2,
        ADDRESSLINE3,
        CREATE_USER)
        VALUES (
        #{amazonOrderId,jdbcType=VARCHAR},
        #{name,jdbcType=VARCHAR},
        #{company,jdbcType=VARCHAR},
        #{phone,jdbcType=VARCHAR},
        #{countryCode,jdbcType=VARCHAR},
        #{postalCode,jdbcType=VARCHAR},
        #{city,jdbcType=VARCHAR},
        #{stateOrRegion,jdbcType=VARCHAR},
        #{addressLine1,jdbcType=VARCHAR},
        #{addressLine2,jdbcType=VARCHAR},
        #{addressLine3,jdbcType=VARCHAR},
        #{createUser,jdbcType=VARCHAR})
    </insert>
    <!--<insert id="insertAddress" parameterType="java.util.List">
        MERGE INTO T_ADDRESS t1
        USING (
        <foreach close="" collection="list" index="index" item="item" open="" separator="union">
            SELECT #{item.amazonOrderId} amazonOrderId FROM dual
        </foreach>
        ) t2
        ON (t1.AMAZONORDERID = t2.amazonOrderId)
        WHEN matched THEN
        UPDATE set
        t1.CREATE_USER = #{item.createUser,jdbcType=VARCHAR}
        WHEN not matched THEN
        INSERT(
        AMAZONORDERID,
        USERNAME,
        COMPANY,
        PHONE,
        COUNTRYCODE,
        POSTALCODE,
        CITY,
        STATEORREGION,
        ADDRESSLINE1,
        ADDRESSLINE2,
        ADDRESSLINE3,
        CREATE_USER)
        VALUES (
        #{item.amazonOrderId,jdbcType=VARCHAR},
        #{item.name,jdbcType=VARCHAR},
        #{item.company,jdbcType=VARCHAR},
        #{item.phone,jdbcType=VARCHAR},
        #{item.countryCode,jdbcType=VARCHAR},
        #{item.postalCode,jdbcType=VARCHAR},
        #{item.city,jdbcType=VARCHAR},
        #{item.stateOrRegion,jdbcType=VARCHAR},
        #{item.addressLine1,jdbcType=VARCHAR},
        #{item.addressLine2,jdbcType=VARCHAR},
        #{item.addressLine3,jdbcType=VARCHAR},
        #{item.createUser,jdbcType=VARCHAR})
    </insert>-->
    <insert id="cloneAddress" parameterType="java.lang.String">
        INSERT INTO
        T_ADDRESS(AMAZONORDERID,
        USERNAME,
        COMPANY,
        PHONE,
        COUNTRYCODE,
        POSTALCODE,
        CITY,
        STATEORREGION,
        ADDRESSLINE1,
        ADDRESSLINE2,
        ADDRESSLINE3,
        CREATE_USER)
        SELECT
        t1.AMAZONORDERID || '-clone',
        t1.USERNAME,
        t1.COMPANY,
        t1.PHONE,
        t1.COUNTRYCODE,
        t1.POSTALCODE,
        t1.CITY,
        t1.STATEORREGION,
        t1.ADDRESSLINE1,
        t1.ADDRESSLINE2,
        t1.ADDRESSLINE3,
        t1.CREATE_USER
        FROM T_ADDRESS t1
        WHERE t1.AMAZONORDERID = #{amazonOrderId,jdbcType=VARCHAR}
    </insert>
    <select id="selectAddress" parameterType="java.lang.String" resultType="java.util.Map">
        SELECT * FROM T_ADDRESS
        WHERE AMAZONORDERID = #{amazonOrderId,jdbcType=VARCHAR}
    </select>
    <select id="selectLocalOrder" resultType="java.util.Map" parameterType="java.util.Map">
        select t1.id,
        t1.amazonorderid,
        t1.salesman,
        t1.salescompany,
        t1.buyercountry,
        t1.marketplaceId,
        t6.user_name,
        t5.shop_name,
        t5.merchant_id,
        t1.runningtime,
        t1.intltracknum,
        t1.purchaseDate,
        t1.FULFILLMENTCHANNEL,
        t7.name transportCompany,
        t1.shippingPrice,
        t1.localstatus,
        t1.remark,
        t1.update_time,
        t3.name countryName,
        t2.smallImage,
        t4.company_name,
        t1.paymentmethod,
        t2.sku,
        t2.asin,
        trunc(sum(t2.itempricermb + t2.shippingPricermb + t2.giftWrapPricermb + t2.commissionRMB),2) itemprice,
        trunc(sum(t2.cost),2) cost,
        trunc(sum(t2.refundment),2) refundment,
        trunc(sum(t2.itempricermb - t2.cost - t2.refundment - t1.shippingPrice + t2.shippingPricermb +
        t2.giftWrapPricermb + t2.commissionRMB),2) profit
        from T_ORDER t1
        left join
        (select amazonorderid,
        wm_concat(smallimage) smallimage,
        wm_concat(sellersku) sku,
        wm_concat(asin) asin,
        wm_concat(tracknum) tracknum,
        trunc(sum(itempricermb),2) itempricermb,
        trunc(sum(shippingPricermb),2) shippingPricermb,
        trunc(sum(refundment),2) refundment,
        trunc(sum(cost),2) cost,
        trunc(sum(giftWrapPricermb),2) giftWrapPricermb,
        trunc(sum(commissionRMB),2) commissionRMB
        from t_order_item
        group by amazonorderid) t2
        on t2.amazonorderid = t1.amazonorderid
        left join t_country t3
        on t3.id = t1.buyercountry
        left join t_user_company t4
        on t4.company_id = t1.salescompany
        left join (select distinct merchant_id,shop_name,create_user from t_shop) t5
        on t5.merchant_id = t1.salessource
        left join t_user_info t6
        on t6.user_id= t1.salesman
        left join t_transport_company t7
        on t7.id = t1.transportcompany
        WHERE 1=1
        <if test="amazonOrderId !=null and amazonOrderId !=''">
            AND t1.AMAZONORDERID LIKE '%${amazonOrderId}%'
        </if>
        <if test="salesMan !=null and salesMan !=''">
            AND t1.SALESMAN = #{salesMan,jdbcType=VARCHAR}
            AND t5.CREATE_USER = #{salesMan,jdbcType=VARCHAR}
        </if>
        <if test="salesCompany !=null and salesCompany !=''">
            AND t1.SALESCOMPANY = #{salesCompany,jdbcType=VARCHAR}
        </if>
        <if test="salesSource !=null and salesSource !=''">
            AND t1.SALESSOURCE = #{salesSource,jdbcType=VARCHAR}
        </if>
        <if test="buyerCounty !=null and buyerCounty !=''">
            AND t1.BUYERCOUNTRY = #{buyerCounty,jdbcType=VARCHAR}
        </if>
        <if test="intlTrackNum !=null and intlTrackNum !=''">
            AND t1.INTLTRACKNUM = #{intlTrackNum,jdbcType=VARCHAR}
        </if>
        <if test="transportCompany !=null and transportCompany !=''">
            AND t1.TRANSPORTCOMPANY = #{transportCompany,jdbcType=VARCHAR}
        </if>
        <if test="localStatus != null and localStatus != ''">
            <choose>
                <when test='localStatus == "10"'>
                    AND t1.FULFILLMENTCHANNEL = 'FBA'
                </when>
                <otherwise>
                    AND t1.LOCALSTATUS = #{localStatus,jdbcType=VARCHAR}
                    AND t1.FULFILLMENTCHANNEL != 'FBA'
                </otherwise>
            </choose>
        </if>
        <if test="logmin != null and logmin != ''">
            <choose>
                <when test='localStatus != null and localStatus != "" and localStatus == "4"'>
                    AND t1.UPDATE_TIME <![CDATA[>=]]> #{logmin,jdbcType=VARCHAR}
                </when>
                <otherwise>
                    AND t1.PURCHASEDATE <![CDATA[>=]]> #{logmin,jdbcType=VARCHAR}
                </otherwise>
            </choose>
        </if>
        <if test="logmax != null and logmax != ''">
            <choose>
                <when test='localStatus != null and localStatus != "" and localStatus == "4"'>
                    AND t1.UPDATE_TIME  <![CDATA[<=]]> #{logmax,jdbcType=VARCHAR}
                </when>
                <otherwise>
                    AND t1.PURCHASEDATE  <![CDATA[<=]]> #{logmax,jdbcType=VARCHAR}
                </otherwise>
            </choose>
        </if>
        <if test="sku !=null and sku != ''">
            AND t2.SKU LIKE '%${sku}%'
        </if>
        <if test="trackNum !=null and trackNum != ''">
            AND t2.TRACKNUM LIKE '%${trackNum}%'
        </if>
        group by t1.id,
        t1.amazonorderid,
        t1.salesman,
        t1.salescompany,
        t1.buyercountry,
        t1.marketplaceId,
        t6.user_name,
        t5.shop_name,
        t5.merchant_id,
        t1.runningtime,
        t1.intltracknum,
        t1.purchaseDate,
        t1.FULFILLMENTCHANNEL,
        t7.name,
        t1.shippingPrice,
        t1.localstatus,
        t1.remark,
        t1.update_time,
        t3.name,
        t2.smallImage,
        t3.exrate,
        t4.company_name,
        t1.paymentmethod,
        t2.sku,
        t2.asin
        <choose>
            <when test='localStatus != null and localStatus != "" and localStatus == "4"'>
                ORDER BY t1.UPDATE_TIME DESC
            </when>
            <otherwise>
                ORDER BY t1.PURCHASEDATE DESC
            </otherwise>
        </choose>
    </select>
    <select id="selectLocalOrderItem" resultType="java.util.Map" parameterType="java.lang.String">
        SELECT t1.* ,trunc((t1.ITEMPRICE + t1.SHIPPINGPRICE + t1.GIFTWRAPPRICE + t1.COMMISSION),2) || '(' ||
        t1.CURRENCYCODE || ')' ITEMPRICESUM from T_ORDER_ITEM t1
        WHERE t1.AMAZONORDERID = #{amazonOrderId,jdbcType=VARCHAR}
        <if test="orderItemId !=null and orderItemId != ''">
            AND t1.ORDERITEMID = #{orderItemId,jdbcType=VARCHAR}
        </if>
    </select>
    <update id="updateOrder" parameterType="java.util.Map">
        UPDATE T_ORDER
        set
        UPDATE_TIME = #{updateTime,jdbcType=VARCHAR}
        <if test="status !=null and status !=''">
            ,LOCALSTATUS = #{status,jdbcType=VARCHAR}
        </if>
        <if test="intlTrackNum !=null and intlTrackNum !=''">
            ,INTLTRACKNUM = #{intlTrackNum,jdbcType=VARCHAR}
        </if>
        <if test="shippingPrice !=null and shippingPrice !=''">
            ,SHIPPINGPRICE = #{shippingPrice,jdbcType=VARCHAR}
        </if>
        <if test="transportCompany !=null and transportCompany !=''">
            ,TRANSPORTCOMPANY = #{transportCompany,jdbcType=VARCHAR}
        </if>
        WHERE AMAZONORDERID = #{amazonOrderId,jdbcType=VARCHAR}
    </update>
    <update id="updateOrderShipping" parameterType="java.util.Map">
        UPDATE T_ORDER
        set
        SHIPPINGPRICE = #{shippingPrice,jdbcType=VARCHAR}
        WHERE AMAZONORDERID = #{amazonOrderId,jdbcType=VARCHAR}
    </update>
    <update id="updateOrderItemCommission" parameterType="java.util.Map">
        UPDATE T_ORDER_ITEM
        set
        COMMISSION = #{commission,jdbcType=DOUBLE},
        COMMISSIONRMB = #{commissionRMB,jdbcType=DOUBLE}
        WHERE AMAZONORDERID = #{amazonOrderId,jdbcType=VARCHAR}
        AND ORDERITEMID = #{orderItemId,jdbcType=VARCHAR}
    </update>
    <update id="updateOrderItem" parameterType="java.util.Map">
        UPDATE T_ORDER_ITEM
        set STATUS = #{status,jdbcType=VARCHAR}
        <if test="cost !=null and cost !=''">
            ,COST = #{cost,jdbcType=VARCHAR}
        </if>
        <if test="refundment !=null and refundment !=''">
            ,REFUNDMENT = #{refundment,jdbcType=VARCHAR}
        </if>
        <if test="trackNum !=null and trackNum !=''">
            ,TRACKNUM = #{trackNum,jdbcType=VARCHAR}
        </if>
        <if test="purchaseNum !=null and purchaseNum !=''">
            ,PURCHASENUM = #{purchaseNum,jdbcType=VARCHAR}
        </if>
        WHERE AMAZONORDERID = #{amazonOrderId,jdbcType=VARCHAR}
        <if test="orderItemId !=null and orderItemId !=''">
            AND ORDERITEMID = #{orderItemId,jdbcType=VARCHAR}
        </if>
    </update>
    <update id="updateOrderRemark" parameterType="java.util.Map">
         UPDATE T_ORDER
         set REMARK = #{remark,jdbcType=VARCHAR}
         WHERE AMAZONORDERID = #{amazonOrderId,jdbcType=VARCHAR}
    </update>
    <insert id="inserOperationLog" parameterType="java.util.Map">
        INSERT INTO T_OPERATION_LOG
        (ID,
        AMAZONORDERID,
        OPERATION_TYPE,
        OPERATION_INFO,
        OPERATION_USER,
        OPERATION_TIME)
        VALUES
        (seq_operation_id.nextval,
        #{amazonOrderId,jdbcType=VARCHAR},
        #{type,jdbcType=VARCHAR},
        #{info,jdbcType=VARCHAR},
        #{user,jdbcType=VARCHAR},
        #{time,jdbcType=VARCHAR})
    </insert>
    <select id="selectOperationLog" parameterType="java.lang.String" resultType="java.util.Map">
        SELECT t1.*,t2.USER_NAME FROM T_OPERATION_LOG t1
        LEFT JOIN T_USER_INFO t2
        ON t1.OPERATION_USER = t2.USER_ID
        WHERE AMAZONORDERID = #{amazonOrderId,jdbcType=VARCHAR}
        ORDER BY OPERATION_TIME DESC
    </select>
    <select id="selectFees" parameterType="java.util.Map" resultType="java.util.Map">
        SELECT
        nvl(trunc(sum(t2.itempricermb + t2.shippingPricermb + t2.giftWrapPricermb + t2.commissionRMB),2),0) itemprice,
        nvl(trunc(sum(t1.shippingPrice),2),0) shippingPrice,
        nvl(trunc(sum(t2.cost),2),0) cost,
        nvl(trunc(sum(t2.refundment),2),0) refundment,
        nvl(trunc(sum(t2.itempricermb - t2.cost - t2.refundment - t1.shippingPrice + t2.shippingPricermb +
        t2.giftWrapPricermb + t2.commissionRMB),2),0) profit
        FROM T_ORDER t1
        LEFT JOIN
        (select amazonorderid,
        wm_concat(sellersku) sku,
        wm_concat(tracknum) tracknum,
        trunc(sum(itempricermb),2) itempricermb,
        trunc(sum(shippingPricermb),2) shippingPricermb,
        trunc(sum(refundment),2) refundment,
        trunc(sum(cost),2) cost,
        trunc(sum(giftWrapPricermb),2) giftWrapPricermb,
        trunc(sum(commissionRMB),2) commissionRMB
        from t_order_item
        group by amazonorderid) t2
        on t2.amazonorderid = t1.amazonorderid
        WHERE 1=1
        <if test="amazonOrderId !=null and amazonOrderId !=''">
            AND t1.AMAZONORDERID = #{amazonOrderId,jdbcType=VARCHAR}
        </if>
        <if test="salesMan !=null and salesMan !=''">
            AND t1.SALESMAN = #{salesMan,jdbcType=VARCHAR}
        </if>
        <if test="salesCompany !=null and salesCompany !=''">
            AND t1.SALESCOMPANY = #{salesCompany,jdbcType=VARCHAR}
        </if>
        <if test="salesSource !=null and salesSource !=''">
            AND t1.SALESSOURCE = #{salesSource,jdbcType=VARCHAR}
        </if>
        <if test="buyerCounty !=null and buyerCounty !=''">
            AND t1.BUYERCOUNTRY = #{buyerCounty,jdbcType=VARCHAR}
        </if>
        <if test="intlTrackNum !=null and intlTrackNum !=''">
            AND t1.INTLTRACKNUM = #{intlTrackNum,jdbcType=VARCHAR}
        </if>
        <if test="transportCompany !=null and transportCompany !=''">
            AND t1.TRANSPORTCOMPANY = #{transportCompany,jdbcType=VARCHAR}
        </if>
        <if test="localStatus !=null and localStatus !=''">
            <choose>
                <when test="localStatus == '10'">
                    AND t1.FULFILLMENTCHANNEL = 'FBA'
                </when>
                <otherwise>
                    AND t1.LOCALSTATUS = #{localStatus,jdbcType=VARCHAR}
                    AND t1.FULFILLMENTCHANNEL != 'FBA'
                </otherwise>
            </choose>
        </if>
        <if test="logmin !=null and logmin != ''">
            <choose>
                <when test='localStatus != null and localStatus != "" and localStatus == "4"'>
                    AND t1.UPDATE_TIME <![CDATA[>=]]> #{logmin,jdbcType=VARCHAR}
                </when>
                <otherwise>
                    AND t1.PURCHASEDATE <![CDATA[>=]]> #{logmin,jdbcType=VARCHAR}
                </otherwise>
            </choose>
        </if>
        <if test="logmax !=null and logmax != ''">
            <choose>
                <when test='localStatus != null and localStatus != "" and localStatus == "4"'>
                    AND t1.UPDATE_TIME  <![CDATA[<=]]> #{logmax,jdbcType=VARCHAR}
                </when>
                <otherwise>
                    AND t1.PURCHASEDATE  <![CDATA[<=]]> #{logmax,jdbcType=VARCHAR}
                </otherwise>
            </choose>
        </if>
        <if test="sku !=null and sku != ''">
            AND t2.SKU LIKE '%${sku}%'
        </if>
        <if test="trackNum !=null and trackNum != ''">
            AND t2.TRACKNUM LIKE '%${trackNum}%'
        </if>
    </select>
    <delete id="delOrder" parameterType="java.lang.String">
        DELETE FROM T_ORDER
        WHERE AMAZONORDERID = #{amazonOrderId,jdbcType=VARCHAR}
    </delete>
    <delete id="delOrderItem" parameterType="java.lang.String">
        DELETE FROM T_ORDER_ITEM
        WHERE AMAZONORDERID = #{amazonOrderId,jdbcType=VARCHAR}
    </delete>
    <delete id="delAddress" parameterType="java.lang.String">
        DELETE FROM T_ADDRESS
        WHERE AMAZONORDERID = #{amazonOrderId,jdbcType=VARCHAR}
    </delete>
</mapper>